#!/usr/bin/env python3
"""
Script pour corriger les images en production sur HostGator
"""

import os
import sys

# Ajouter le r√©pertoire courant au path pour importer les modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def fix_production_database():
    """Corrige la base de donn√©es de production"""
    print("üîß Correction de la base de donn√©es de production...")
    
    try:
        # Import des modules de base de donn√©es
        from database import get_mysql_connection
        
        # Connexion √† la base de donn√©es MySQL de production
        conn = get_mysql_connection()
        if not conn:
            print("‚ùå Impossible de se connecter √† la base de donn√©es MySQL")
            return False
        
        cur = conn.cursor()
        
        # R√©cup√©rer tous les articles
        cur.execute("SELECT id, title, image_path FROM articles")
        articles = cur.fetchall()
        
        print(f"üìä {len(articles)} articles trouv√©s en production")
        
        fixed_count = 0
        
        for article_id, title, image_path in articles:
            print(f"\nüìù Article {article_id}: {title[:50]}...")
            print(f"   Image actuelle: {image_path}")
            
            # V√©rifier si l'image est manquante ou invalide
            needs_fix = False
            
            if not image_path or image_path == '':
                print("   ‚ùå Aucune image")
                needs_fix = True
            elif not image_path.startswith('https://www.cmtch.online'):
                print("   ‚ùå URL non-HostGator")
                needs_fix = True
            elif 'article_images' in image_path and not image_path.endswith('default_article.jpg'):
                print("   ‚ùå Image sp√©cifique potentiellement manquante")
                needs_fix = True
            
            if needs_fix:
                # Utiliser l'image par d√©faut HostGator
                default_url = "https://www.cmtch.online/static/article_images/default_article.jpg"
                
                try:
                    cur.execute("UPDATE articles SET image_path = %s WHERE id = %s", (default_url, article_id))
                    conn.commit()
                    print(f"   ‚úÖ Image par d√©faut assign√©e: {default_url}")
                    fixed_count += 1
                except Exception as e:
                    print(f"   ‚ùå Erreur mise √† jour: {e}")
            else:
                print("   ‚úÖ Image valide")
        
        conn.close()
        
        print(f"\nüéâ Correction termin√©e!")
        print(f"   ‚úÖ {fixed_count} articles corrig√©s")
        print(f"   üìä {len(articles)} articles trait√©s au total")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")
        return False

def verify_production_fix():
    """V√©rifie que toutes les images sont maintenant valides en production"""
    print("\nüîç V√©rification des corrections en production...")
    
    try:
        from database import get_mysql_connection
        
        conn = get_mysql_connection()
        if not conn:
            print("‚ùå Impossible de se connecter √† la base de donn√©es MySQL")
            return False
        
        cur = conn.cursor()
        
        # V√©rifier les articles sans images
        cur.execute("SELECT COUNT(*) FROM articles WHERE image_path IS NULL OR image_path = ''")
        no_images = cur.fetchone()[0]
        
        # V√©rifier les articles avec images par d√©faut
        cur.execute("SELECT COUNT(*) FROM articles WHERE image_path LIKE '%default_article.jpg%'")
        default_images = cur.fetchone()[0]
        
        # V√©rifier les articles avec URLs HostGator
        cur.execute("SELECT COUNT(*) FROM articles WHERE image_path LIKE '%cmtch.online%'")
        hostgator_images = cur.fetchone()[0]
        
        print(f"üìä R√©sultats en production:")
        print(f"   - Articles sans images: {no_images}")
        print(f"   - Articles avec image par d√©faut: {default_images}")
        print(f"   - Articles avec URLs HostGator: {hostgator_images}")
        
        if no_images == 0:
            print("‚úÖ Tous les articles ont maintenant des images en production!")
        else:
            print("‚ö†Ô∏è Certains articles n'ont toujours pas d'images")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def main():
    """Fonction principale"""
    print("üñºÔ∏è Correction des images en production")
    print("=" * 50)
    
    # Correction
    if fix_production_database():
        # V√©rification
        verify_production_fix()
        
        print("\nüí° Prochaines √©tapes:")
        print("   1. Tester l'affichage des articles sur le site")
        print("   2. V√©rifier qu'il n'y a plus d'erreurs 404")
        print("   3. Les images par d√©faut devraient maintenant s'afficher")
    else:
        print("\n‚ùå √âchec de la correction")

if __name__ == "__main__":
    main()
