#!/usr/bin/env python3
"""
Syst√®me de stockage des photos sur HostGator via FTP
"""

import os
import ftplib
import io
import uuid
import time
from typing import Optional, Tuple
import urllib.parse

class HostGatorPhotoStorage:
    """Gestionnaire de stockage des photos sur HostGator"""
    
    def __init__(self):
        # Configuration HostGator avec vos vrais param√®tres
        self.ftp_host = "ftp.novaprint.tn"
        self.ftp_user = "cmtch@cmtch.online"  # Votre nom d'utilisateur FTP
        self.ftp_password = "Anouar881984?"  # Votre mot de passe FTP
        # ‚úÖ CORRIG√â: Upload vers le bon dossier /static/article_images/
        self.remote_photos_dir = "/public_html/static/article_images"  # Dossier sur HostGator
        self.base_url = "https://www.cmtch.online/static/article_images"  # URL publique
        
    def upload_photo(self, file_content: bytes, filename: str) -> Tuple[bool, str, str]:
        """
        Upload une photo sur HostGator
        
        Args:
            file_content: Contenu binaire du fichier
            filename: Nom original du fichier
            
        Returns:
            Tuple[success, message, public_url]
        """
        try:
            # ‚úÖ CORRIG√â: G√©n√©rer un nom simple avec timestamp au lieu d'UUID
            ext = os.path.splitext(filename)[1] or ".jpg"
            timestamp = int(time.time())
            unique_name = f"img_{timestamp}{ext}"
            
            # Connexion FTP
            ftp = ftplib.FTP(self.ftp_host)
            ftp.login(self.ftp_user, self.ftp_password)
            
            # Cr√©er le dossier s'il n'existe pas
            try:
                # Essayer de cr√©er le dossier complet
                ftp.mkd(self.remote_photos_dir)
                print(f"‚úÖ Dossier cr√©√©: {self.remote_photos_dir}")
            except ftplib.error_perm as e:
                if "exists" in str(e).lower():
                    print(f"‚ÑπÔ∏è Dossier existe d√©j√†: {self.remote_photos_dir}")
                else:
                    print(f"‚ö†Ô∏è Erreur cr√©ation dossier: {e}")
                    # Essayer de cr√©er le dossier parent d'abord
                    try:
                        ftp.mkd("/public_html")
                        ftp.mkd("/public_html/static")
                        ftp.mkd(self.remote_photos_dir)
                        print(f"‚úÖ Dossier cr√©√© avec parents: {self.remote_photos_dir}")
                    except:
                        pass
            
            # Changer vers le dossier article_images
            try:
                ftp.cwd(self.remote_photos_dir)
            except ftplib.error_perm:
                # Si on ne peut pas changer de dossier, utiliser le r√©pertoire racine
                print("‚ö†Ô∏è Utilisation du r√©pertoire racine pour l'upload")
            
            # Upload du fichier
            ftp.storbinary(f'STOR {unique_name}', 
                          io.BytesIO(file_content))
            
            # ‚úÖ CORRIG√â: Appliquer les permissions 644 apr√®s upload
            try:
                ftp.sendcmd(f"SITE CHMOD 644 {unique_name}")
                print(f"‚úÖ Permissions 644 appliqu√©es √† {unique_name}")
            except:
                print(f"‚ö†Ô∏è Impossible d'appliquer les permissions √† {unique_name}")
            
            # Fermer la connexion
            ftp.quit()
            
            # URL publique de la photo
            public_url = f"{self.base_url}/{unique_name}"
            
            return True, f"Photo upload√©e avec succ√®s: {unique_name}", public_url
            
        except Exception as e:
            return False, f"Erreur lors de l'upload: {str(e)}", ""
    
    def delete_photo(self, filename: str) -> Tuple[bool, str]:
        """
        Supprime une photo de HostGator
        
        Args:
            filename: Nom du fichier √† supprimer
            
        Returns:
            Tuple[success, message]
        """
        try:
            # Connexion FTP
            ftp = ftplib.FTP(self.ftp_host)
            ftp.login(self.ftp_user, self.ftp_password)
            
            # Changer vers le dossier article_images
            ftp.cwd(self.remote_photos_dir)
            
            # Supprimer le fichier
            ftp.delete(filename)
            
            # Fermer la connexion
            ftp.quit()
            
            return True, f"Photo supprim√©e avec succ√®s: {filename}"
            
        except Exception as e:
            return False, f"Erreur lors de la suppression: {str(e)}"
    
    def list_photos(self) -> Tuple[bool, list, str]:
        """
        Liste toutes les photos sur HostGator
        
        Returns:
            Tuple[success, photo_list, message]
        """
        try:
            # Connexion FTP
            ftp = ftplib.FTP(self.ftp_host)
            ftp.login(self.ftp_user, self.ftp_password)
            
            # Changer vers le dossier article_images
            ftp.cwd(self.remote_photos_dir)
            
            # Lister les fichiers
            files = ftp.nlst()
            
            # Filtrer les fichiers d'images
            image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp'}
            photos = []
            
            for file in files:
                if file in {'.', '..'}:
                    continue
                ext = os.path.splitext(file)[1].lower()
                if ext in image_extensions:
                    photos.append({
                        'filename': file,
                        'url': f"{self.base_url}/{file}",
                        'size': ftp.size(file) if ftp.size(file) else 0
                    })
            
            # Fermer la connexion
            ftp.quit()
            
            return True, photos, f"{len(photos)} photos trouv√©es"
            
        except Exception as e:
            return False, [], f"Erreur lors de la liste: {str(e)}"
    
    def get_photo_url(self, filename: str) -> str:
        """
        Retourne l'URL publique d'une photo
        
        Args:
            filename: Nom du fichier
            
        Returns:
            URL publique de la photo
        """
        return f"{self.base_url}/{filename}"
    
    def photo_exists(self, filename: str) -> bool:
        """
        V√©rifie si une photo existe sur HostGator
        
        Args:
            filename: Nom du fichier
            
        Returns:
            True si la photo existe, False sinon
        """
        try:
            # Connexion FTP
            ftp = ftplib.FTP(self.ftp_host)
            ftp.login(self.ftp_user, self.ftp_password)
            
            # Changer vers le dossier article_images
            ftp.cwd(self.remote_photos_dir)
            
            # V√©rifier si le fichier existe
            try:
                ftp.size(filename)
                exists = True
            except:
                exists = False
            
            # Fermer la connexion
            ftp.quit()
            
            return exists
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification existence: {e}")
            return False

def test_hostgator_connection():
    """Test de connexion √† HostGator"""
    print("üîç Test de connexion √† HostGator...")
    
    storage = HostGatorPhotoStorage()
    
    try:
        # Test de connexion
        ftp = ftplib.FTP(storage.ftp_host)
        ftp.login(storage.ftp_user, storage.ftp_password)
        
        print("‚úÖ Connexion FTP r√©ussie !")
        
        # Test de cr√©ation de dossier
        try:
            ftp.mkd(storage.remote_photos_dir)
            print(f"‚úÖ Dossier cr√©√©: {storage.remote_photos_dir}")
        except ftplib.error_perm:
            print(f"‚ÑπÔ∏è Dossier existe d√©j√†: {storage.remote_photos_dir}")
        
        # Lister le contenu
        ftp.cwd(storage.remote_photos_dir)
        files = ftp.nlst()
        print(f"üìÅ {len(files)} fichier(s) dans le dossier photos")
        
        ftp.quit()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test du syst√®me de stockage HostGator")
    print("=" * 50)
    
    if test_hostgator_connection():
        print("\nüéâ Configuration HostGator OK !")
        print("üí° Vous pouvez maintenant utiliser le stockage des photos sur HostGator")
    else:
        print("\n‚ùå Probl√®me de configuration HostGator")
        print("üí° V√©rifiez vos param√®tres FTP dans le fichier")

if __name__ == "__main__":
    main()