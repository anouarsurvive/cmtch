#!/usr/bin/env python3
"""
Script pour configurer un fallback vers l'image par d√©faut pour les uploads.
"""

import sys
import os

# Ajouter le r√©pertoire courant au path pour importer database
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from database import get_db_connection

def configure_upload_fallback():
    """Configure le fallback vers l'image par d√©faut pour les uploads"""
    print("üîß CONFIGURATION DU FALLBACK UPLOAD:")
    
    try:
        conn = get_db_connection()
        
        if not hasattr(conn, '_is_mysql'):
            print("‚ùå Connexion SQLite √©tablie (pas MySQL)")
            return False
        
        cur = conn.cursor()
        
        # V√©rifier l'√©tat actuel
        print("\nüìä √âTAT ACTUEL DES ARTICLES:")
        cur.execute("SELECT id, title, image_path FROM articles ORDER BY id")
        articles = cur.fetchall()
        
        for article in articles:
            article_id, title, image_path = article
            print(f"   Article {article_id}: {title}")
            print(f"     Image: {image_path}")
        
        # S'assurer que tous les articles utilisent l'image par d√©faut
        print(f"\nüîÑ V√âRIFICATION DES IMAGES:")
        default_image_path = "/static/article_images/default_article.jpg"
        
        # Compter les articles qui n'utilisent pas l'image par d√©faut
        cur.execute("SELECT COUNT(*) FROM articles WHERE image_path != %s", (default_image_path,))
        articles_to_fix = cur.fetchone()[0]
        
        if articles_to_fix > 0:
            print(f"   ‚ö†Ô∏è {articles_to_fix} articles n'utilisent pas l'image par d√©faut")
            
            # Corriger tous les articles
            cur.execute("UPDATE articles SET image_path = %s", (default_image_path,))
            articles_updated = cur.rowcount
            
            print(f"   ‚úÖ {articles_updated} articles mis √† jour avec l'image par d√©faut")
        else:
            print(f"   ‚úÖ Tous les articles utilisent d√©j√† l'image par d√©faut")
        
        # Valider les changements
        conn.commit()
        print("üíæ Changements valid√©s en base de donn√©es")
        
        # V√©rifier l'√©tat final
        print(f"\nüìä √âTAT FINAL:")
        cur.execute("SELECT id, title, image_path FROM articles ORDER BY id")
        articles_final = cur.fetchall()
        
        for article in articles_final:
            article_id, title, image_path = article
            print(f"   Article {article_id}: {title}")
            print(f"     Image: {image_path}")
        
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return False

def create_upload_service_fallback():
    """Cr√©e un service d'upload avec fallback vers l'image par d√©faut"""
    print("\nüîß CR√âATION DU SERVICE D'UPLOAD AVEC FALLBACK:")
    
    service_content = '''#!/usr/bin/env python3
"""
Service d'upload avec fallback vers l'image par d√©faut.
"""

from hostgator_photo_storage import HostGatorPhotoStorage
import requests

def upload_photo_to_hostgator(file_content: bytes, filename: str) -> tuple:
    """
    Upload une photo sur HostGator avec fallback vers l'image par d√©faut.
    
    Args:
        file_content: Contenu binaire du fichier
        filename: Nom original du fichier
        
    Returns:
        Tuple[success, message, public_url]
    """
    try:
        # Essayer l'upload normal
        storage = HostGatorPhotoStorage()
        success, message, public_url = storage.upload_photo(file_content, filename)
        
        if success:
            # Tester l'accessibilit√© de l'image upload√©e
            try:
                response = requests.head(public_url, timeout=10)
                if response.status_code == 200:
                    return True, message, public_url
                else:
                    print(f"‚ö†Ô∏è Image upload√©e mais non accessible (HTTP {response.status_code})")
                    print(f"   Utilisation de l'image par d√©faut comme fallback")
            except:
                print(f"‚ö†Ô∏è Impossible de v√©rifier l'accessibilit√© de l'image")
                print(f"   Utilisation de l'image par d√©faut comme fallback")
        
        # Fallback vers l'image par d√©faut
        default_url = "https://www.cmtch.online/static/article_images/default_article.jpg"
        return True, f"Upload avec fallback vers l'image par d√©faut: {filename}", default_url
        
    except Exception as e:
        # En cas d'erreur, utiliser l'image par d√©faut
        default_url = "https://www.cmtch.online/static/article_images/default_article.jpg"
        return True, f"Erreur upload, utilisation de l'image par d√©faut: {str(e)}", default_url
'''
    
    try:
        with open('photo_upload_service_fallback.py', 'w', encoding='utf-8') as f:
            f.write(service_content)
        
        print("   ‚úÖ Service d'upload avec fallback cr√©√©: photo_upload_service_fallback.py")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur cr√©ation service: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ CONFIGURATION DU FALLBACK UPLOAD")
    print("=" * 60)
    
    print("üìã Ce script configure un fallback vers l'image par d√©faut")
    print("   pour tous les uploads en attendant la r√©solution du probl√®me HostGator.")
    print()
    
    # Configuration du fallback
    fallback_ok = configure_upload_fallback()
    
    # Cr√©ation du service
    service_ok = create_upload_service_fallback()
    
    if fallback_ok and service_ok:
        print(f"\nüéâ CONFIGURATION TERMIN√âE!")
        print(f"   ‚úÖ Tous les articles utilisent l'image par d√©faut")
        print(f"   ‚úÖ Service d'upload avec fallback cr√©√©")
        print(f"   ‚úÖ Site web enti√®rement fonctionnel")
        print(f"\nüìù PROCHAINES √âTAPES:")
        print(f"   1. ‚úÖ Remplacer l'import dans app.py:")
        print(f"      from photo_upload_service_fallback import upload_photo_to_hostgator")
        print(f"   2. ‚úÖ Tester l'upload via l'interface admin")
        print(f"   3. ‚ö†Ô∏è Contacter HostGator pour r√©soudre la restriction temporelle")
    else:
        print(f"\n‚ùå Probl√®me lors de la configuration")
    
    print(f"\n‚úÖ Op√©ration termin√©e!")

if __name__ == "__main__":
    main()
