#!/usr/bin/env python3
"""
Script final de v√©rification pour confirmer que le probl√®me des images d'articles est r√©solu.
"""

import os
import sqlite3
from pathlib import Path

def get_db_connection():
    """Retourne une connexion √† la base de donn√©es SQLite"""
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    DB_PATH = os.path.join(BASE_DIR, "database.db")
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def final_verification():
    """V√©rification finale de la r√©solution du probl√®me"""
    print("üîç V√âRIFICATION FINALE - PROBL√àME DES IMAGES D'ARTICLES")
    print("=" * 70)
    
    # 1. V√©rifier la base de donn√©es
    print("\nüìä V√âRIFICATION DE LA BASE DE DONN√âES:")
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        # Compter les articles
        cur.execute("SELECT COUNT(*) FROM articles")
        total_articles = cur.fetchone()[0]
        print(f"   Total des articles: {total_articles}")
        
        # V√©rifier les articles avec images valides
        cur.execute("SELECT COUNT(*) FROM articles WHERE image_path LIKE '/static/article_images/%'")
        articles_with_valid_images = cur.fetchone()[0]
        print(f"   Articles avec images valides: {articles_with_valid_images}")
        
        # V√©rifier qu'il n'y a plus de chemins invalides
        cur.execute("SELECT COUNT(*) FROM articles WHERE image_path LIKE 'http%'")
        invalid_urls = cur.fetchone()[0]
        print(f"   URLs externes invalides: {invalid_urls}")
        
        # V√©rifier les articles sans images
        cur.execute("SELECT COUNT(*) FROM articles WHERE image_path IS NULL OR image_path = ''")
        articles_without_images = cur.fetchone()[0]
        print(f"   Articles sans images: {articles_without_images}")
        
        conn.close()
        
        # √âvaluation de la base de donn√©es
        if invalid_urls == 0 and articles_without_images == 0:
            print("   ‚úÖ BASE DE DONN√âES: CORRIG√âE")
        else:
            print("   ‚ùå BASE DE DONN√âES: PROBL√àMES RESTANTS")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification de la base de donn√©es: {e}")
    
    # 2. V√©rifier les fichiers physiques
    print("\nüìÅ V√âRIFICATION DES FICHIERS PHYSIQUES:")
    images_dir = Path("static/article_images")
    
    if images_dir.exists():
        image_files = list(images_dir.glob("*.svg")) + list(images_dir.glob("*.html")) + list(images_dir.glob("*.jpg")) + list(images_dir.glob("*.png"))
        print(f"   Images disponibles: {len(image_files)}")
        
        for img in image_files:
            print(f"     - {img.name}")
        
        if len(image_files) > 0:
            print("   ‚úÖ DOSSIER D'IMAGES: OK")
        else:
            print("   ‚ùå DOSSIER D'IMAGES: VIDE")
    else:
        print("   ‚ùå DOSSIER D'IMAGES: N'EXISTE PAS")
    
    # 3. V√©rifier la coh√©rence
    print("\nüîó V√âRIFICATION DE LA COH√âRENCE:")
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        # V√©rifier que tous les chemins r√©f√©renc√©s existent
        cur.execute("SELECT DISTINCT image_path FROM articles WHERE image_path IS NOT NULL AND image_path != ''")
        referenced_paths = cur.fetchall()
        
        missing_files = 0
        for row in referenced_paths:
            image_path = row['image_path']
            if image_path.startswith('/static/article_images/'):
                filename = image_path.split('/')[-1]
                file_path = images_dir / filename
                if not file_path.exists():
                    missing_files += 1
                    print(f"     ‚ùå Fichier manquant: {filename}")
        
        if missing_files == 0:
            print("   ‚úÖ COH√âRENCE: PARFAITE")
        else:
            print(f"   ‚ö†Ô∏è COH√âRENCE: {missing_files} fichiers manquants")
        
        conn.close()
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification de coh√©rence: {e}")
    
    # 4. R√©sum√© final
    print("\nüìã R√âSUM√â FINAL:")
    
    if invalid_urls == 0 and articles_without_images == 0 and missing_files == 0:
        print("üéâ PROBL√àME R√âSOLU AVEC SUCC√àS!")
        print("   ‚úÖ Toutes les r√©f√©rences d'images invalides ont √©t√© supprim√©es")
        print("   ‚úÖ Tous les articles ont maintenant des images valides")
        print("   ‚úÖ Tous les fichiers r√©f√©renc√©s existent physiquement")
        print("   ‚úÖ Votre page des articles devrait fonctionner sans erreurs 404")
    else:
        print("‚ö†Ô∏è PROBL√àME PARTIELLEMENT R√âSOLU")
        if invalid_urls > 0:
            print(f"   ‚ùå {invalid_urls} URLs externes invalides restent")
        if articles_without_images > 0:
            print(f"   ‚ùå {articles_without_images} articles n'ont pas d'images")
        if missing_files > 0:
            print(f"   ‚ùå {missing_files} fichiers r√©f√©renc√©s sont manquants")
    
    print("\n‚úÖ V√©rification termin√©e!")

def main():
    """Fonction principale"""
    final_verification()

if __name__ == "__main__":
    main()
